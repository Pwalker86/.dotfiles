set nocompatible              " be iMproved, required
filetype plugin on                 " required
set omnifunc=syntaxcomplete#Complete

call plug#begin('~/.vim/plugged')
" Make sure you use single quotes
Plug 'flazz/vim-colorschemes'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'mbbill/undotree'
Plug 'mileszs/ack.vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'scrooloose/nerdtree'
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'ludovicchabant/vim-gutentags'
Plug 'kristijanhusak/vim-js-file-import', {'do': 'npm install'}
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'

call plug#end() " add any plugins above this line

" Use deoplete
let g:deoplete#enable_at_startup = 1

" Nerdtree {{{ 
autocmd StdinReadPre * let s:std_in=1
map <BS> :NERDTreeToggle<CR>
"}}}

"Ack.vim settings {{{
cnoreabbrev Ack Ack!
nnoremap <Leader>f :Ack!<Space>
"}}}

" CtrlP settings {{{
"let g:ctrlp_match_window = 'bottom,order:ttb'
"let g:ctrlp_switch_buffer = 0
"let g:ctrlp_working_path_mode = 0
"let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
"  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
"  \ }
"}}}
"
" undotree settings {{{
nnoremap <Leader>u :UndotreeToggle<cr>
"}}}



" General Vim settings {{{
syntax enable           " enable syntax processing
set number relativenumber
set nu rnu
set cursorline          " highlight current line
filetype indent on      " load filetype-specific indent files
set showmatch           " highlight matching [{()}]
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
set smartcase
set tabstop=2       " number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set shiftwidth=2
set autoindent
set smartindent
set cindent
set smarttab
set expandtab       " tabs are spaces
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set backspace=indent,eol,start
colorscheme molokai

let mapleader=" "  " leader is space
" double space opens fuzzy finder
nnoremap <silent> <Leader><Space> :Files<CR>
" Return inserts newline and goes back to command mode
nmap <CR> o<Esc>

"Open new split panes to the right and bottom, which feels more natural
set splitbelow
set splitright

" save session
nnoremap <leader>s :mksession<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
"move vertically by visual line
nnoremap j gj
nnoremap k gk
" space open/closes folds
"nnoremap <space> za

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

"make jk == esc
inoremap jk <esc>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

map :Q :q
map :W :w
map <C-c> a<C-c><ESC>
vnoremap <C-C> :w !pbcopy<CR><CR>

"let g:user_emmet_settings=webapi#json#decode(join(readfile(expand('~/.snippets_custom.json')), "\n"))
"nnoremap <leader><space> :nohlsearch<CR>

"ctags open in new tab
:nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T
"}}}

" vim:foldmethod=marker:foldlevel=0
